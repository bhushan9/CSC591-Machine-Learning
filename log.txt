1. tried ['Level','symbolicRepresentationCount','probIndexinLevel','TotalTime', 'AppCount', 'hintCount', 'WrongApp']

 no of clusters 2 : 30.496
 				3	38.60
 				4	45.29
 				5	46.35

Better results as we increase no of clusters but the ECR value stabilizes when k > 4

2. a= ['Level','NewLevel','SolvedPSInLevel','probDiff','TotalTime','avgstepTimePS','RightApp']

 no of clusters 2:	47.72
 				3:	47.66
 				4:	50.02
 				5:	38.13

Better result when K is 2 and 3 but ECR value decreases drastically when k = 5. Probably not better set of features.

3. f = 4*df['cumul_difficultProblemCountSolved']+2*df['cumul_difficultProblemCountWE']+2*df['cumul_easyProblemCountSolved']+df['cumul_easyProblemCountWE']
 no of clusters 2:	44.88
				3:	44.38
				4:	45.40
				5:	36.68

4. new_df.loc[:,'f2'] = df['avgstepTime'] - df['avgstepTimePS']

 no of clusters 2:	48.472
				3:	43.379
				4:	48.68
				5:	43.43

5. corelation.py
	1. pearsonr - Finds corelation factor on a scale [-1,1]. -1 indicates perfect negative corelation. +1 indicates perfect positive corelation. 

	Made a co-relation matrix out of features
	The corelation values range from ~0 to ~0.99 (There is a wide range of corelation involved in the factors)

6. (127,CurrPro_avgProbTimeWE,3)
(18,difficultProblemCountSolved,2)
(83,cumul_avgstepTimeWE,3)
(78,cumul_hintCount,3)
(59,ruleScoreDS,3)
(69,ruleScoreCONTRA,3)
(119,cumul_SystemInfoHintCount,3)
(75,ruleScoreEXP,3)

7. (127,CurrPro_avgProbTimeWE,3)
(18,difficultProblemCountSolved,2)
(83,cumul_avgstepTimeWE,3)
(78,cumul_hintCount,3)
(13,stepTimeDeviation,3)
(25,UseCount,3)
(16,Level,2)
(17,probDiff,2)
